name: "Axe Shopify Preview"
description: "Run axe accessibility tests on Shopify preview URLs from PR description and comment results."

inputs:
  preview_url_contains:
    description: "Part of the URL to look for (e.g., shopifypreview.com)"
    required: true
  github_token:
    description: "GitHub token to post PR comment"
    required: true
  default_url:
    description: "Default URL to use if no preview URL is found"
    required: false
    default: ""

runs:
  using: "composite"
  steps:
    - name: Extract PR Body
      if: ${{ github.event_name == 'pull_request' }}
      id: pr_body
      shell: bash
      run: |
        echo "Extracting PR body..."
        if [ -z "${{ github.event.pull_request.body }}" ]; then
          echo "PR body is empty, exiting..."
          exit 1
        fi
        echo "PR_BODY<<EOF" >> $GITHUB_ENV
        echo "${{ github.event.pull_request.body }}" >> $GITHUB_ENV
        echo "EOF" >> $GITHUB_ENV

    - name: Parse preview URL from PR body
      if: ${{ github.event_name == 'pull_request' }}
      id: parse_url
      shell: bash
      run: |
        echo "Extracting URLs from PR body..."
        ALL_URLS=$(echo "$PR_BODY" | grep -oE 'https?://[^ )\n]+')

        echo "Extracted URLs:"
        echo "$ALL_URLS"

        MATCHING_URL=$(echo "$ALL_URLS" | grep "$INPUT_PREVIEW_URL_CONTAINS" | head -n1)

        if [ -z "$MATCHING_URL" ]; then
          MATCHING_URL=$(echo "$ALL_URLS" | grep -E '\?preview_theme_id=' | head -n1)
        fi

        echo "==== DEBUG INFO ===="
        echo "All extracted URLs:"
        echo "$ALL_URLS"
        echo "Matched URL:"
        echo "$MATCHING_URL"
        echo "===================="

        if [ -z "$MATCHING_URL" ]; then
          echo "No matching URL found."
          echo "url=" >> $GITHUB_OUTPUT
          exit 1
        fi

        echo "url=$MATCHING_URL" >> $GITHUB_OUTPUT

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: "18"

    - name: Install axe CLI
      shell: bash
      run: |
        echo "Installing axe CLI..."
        npm install -g @axe-core/cli

    - name: Run axe test
      id: run_test
      shell: bash
      run: |
        mkdir -p _axe-a11y-reports
        URL="${{ steps.parse_url.outputs.url }}"
        echo "Testing URL: $URL"

        if [ -z "$URL" ]; then
          if [ -z "${{ inputs.default_url }}" ]; then
            echo "No URL provided and no default URL set. No test run."
            echo "No URL found." > _axe-a11y-reports/axe-summary.md
            exit 0
          else
            echo "No URL provided. Using default URL: ${{ inputs.default_url }}"
            URL="${{ inputs.default_url }}"
          fi
        fi

        echo "Running axe on $URL"
        axe $URL --save _axe-a11y-reports/${{ github.head_ref }}.json

        node <<'EOF'
        const fs = require('fs');
        const report = JSON.parse(fs.readFileSync('./_axe-a11y-reports/${{ github.head_ref }}.json', 'utf8'));
        const violations = report?.[0]?.violations || [];

        if (violations.length === 0) {
          fs.writeFileSync('_axe-a11y-reports/axe-summary.md', `âœ… No accessibility issues found.\n\n`);
          process.exit(0);
        }

        let table = `### ðŸ§ª Axe Accessibility Report\n\n`;
        table += `| Issue | Impact | Target | Help |\n`;
        table += `|-------|--------|--------|------|\n`;

        violations.forEach(v => {
          const impact = v.impact || "n/a";
          const help = `[${v.help}](${v.helpUrl})`;
          v.nodes.forEach(n => {
            const target = Array.isArray(n.target) ? n.target.join(', ') : 'n/a';
            table += `| ${v.id} | ${impact} | \`${target}\` | ${help} |\n`;
          });
        });

        fs.writeFileSync('_axe-a11y-reports/axe-summary.md', table);
        EOF

    - name: Process Violations from Target Branch Report (if available)
      id: process_violations
      shell: bash
      run: |
        BASE_BRANCH="${{ github.base_ref }}"
        TARGET_REPORT="_axe-a11y-reports/axe-report-${{ github.base_ref }}.json"
        echo "Checking for file: $TARGET_REPORT"

        if [ -f "$TARGET_REPORT" ]; then
          echo "Processing downloaded report for target branch..."

          node -e "
            const fs = require('fs');
            const path = '$TARGET_REPORT';
            const report = JSON.parse(fs.readFileSync(path, 'utf8'));
            const violations = report?.[0].violations || [];

            if (violations.length === 0) {
              console.log('No violations found in downloaded report.');
              process.exit(0);
            }

            let violationsTable = '### ðŸ§ª Violations from Downloaded Report\\n\\n';
            violationsTable += '| Issue | Impact | Target | Help |\\n';
            violationsTable += '|-------|--------|--------|------|\\n';

            violations.forEach(v => {
              const impact = v.impact || 'n/a';
              const help = \`[${v.help}](${v.helpUrl})\`;
              v.nodes.forEach(n => {
                const target = Array.isArray(n.target) ? n.target.join(', ') : 'n/a';
                violationsTable += \`| ${v.id} | ${impact} | \${target} | ${help} |\\n\`;
              });
            });

            fs.writeFileSync('_axe-a11y-reports/axe-violations-summary.md', violationsTable);
          "
        else
          echo "No axe-report found for target branch. Skipping violation comparison."
          exit 0
        fi
      if: success() && github.event_name == 'pull_request'

    - name: Comment on PR with results (only if PR is open)
      if: ${{ github.event.pull_request.state == 'open' }}
      uses: actions/github-script@v7
      with:
        github-token: ${{ inputs.github_token }}
        script: |
          const fs = require('fs');
          const summary = fs.readFileSync('_axe-a11y-reports/axe-summary.md', 'utf8');
          const violationsSummaryPath = '_axe-a11y-reports/axe-violations-summary.md';
          const violationsSummary = fs.existsSync(violationsSummaryPath) ? fs.readFileSync(violationsSummaryPath, 'utf8') : '';

          let body = summary;
          if (violationsSummary) {
            body += "\n\n" + violationsSummary;
          }

          await github.rest.issues.createComment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
            body: body,
          });

    - name: Commit and push reports
      if: always()
      shell: bash
      run: |
        git config --global user.name "github-actions[bot]"
        git config --global user.email "github-actions[bot]@users.noreply.github.com"

        git fetch
        git checkout ${{ github.head_ref }}

        git add _axe-a11y-reports
        git commit -m "chore: update axe accessibility reports" || echo "No changes to commit"
        git push
