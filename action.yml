name: "Axe Shopify Preview"
description: "Run axe accessibility tests on Shopify preview URLs from PR description and comment results."
inputs:
  preview_url_contains:
    description: "Part of the URL to look for (e.g., shopifypreview.com)"
    required: true
  github_token:
    description: "GitHub token to post PR comment"
    required: true
runs:
  using: "composite"
  steps:
    - name: Extract PR Body
      id: pr_body
      shell: bash
      run: |
        echo "PR_BODY<<EOF" >> $GITHUB_ENV
        echo "${{ github.event.pull_request.body }}" >> $GITHUB_ENV
        echo "EOF" >> $GITHUB_ENV

    - name: Parse preview URL
      id: parse_url
      shell: bash
      run: |
        # Extract all URLs
        ALL_URLS=$(echo "$PR_BODY" | grep -oE 'https?://[^ )\n]+')

        # Try matching preview_url_contains (if provided)
        MATCHING_URL=$(echo "$ALL_URLS" | grep "$INPUT_PREVIEW_URL_CONTAINS" | head -n1)

        # If no match yet, try matching ?preview_theme_id=
        if [ -z "$MATCHING_URL" ]; then
          MATCHING_URL=$(echo "$ALL_URLS" | grep -E '\?preview_theme_id=' | head -n1)
        fi

        echo "==== DEBUG INFO ===="
        echo "All extracted URLs:"
        echo "$ALL_URLS"
        echo "Matched URL:"
        echo "$MATCHING_URL"
        echo "===================="

        if [ -z "$MATCHING_URL" ]; then
          echo "No matching URL found."
          echo "url=" >> $GITHUB_OUTPUT
          exit 1
        fi

        echo "url=$MATCHING_URL" >> $GITHUB_OUTPUT

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: "18"

    - name: Install axe CLI
      shell: bash
      run: npm install -g @axe-core/cli

    - name: Run axe test
      id: run_test
      shell: bash
      run: |
        if [ -z "${{ steps.parse_url.outputs.url }}" ]; then
          echo "No test run due to missing URL."
          echo "No matching URL found in PR body." > axe-summary.md
          exit 0
        fi

        echo "Running axe on ${{ steps.parse_url.outputs.url }}"
        axe ${{ steps.parse_url.outputs.url }} --save axe-report.json

        node <<'EOF'
        const fs = require('fs');
        const report = JSON.parse(fs.readFileSync('./axe-report.json', 'utf8'));
        const violations = report.violations || [];

        if (violations.length === 0) {
          fs.writeFileSync('axe-summary.md', 'âœ… No accessibility issues found.');
          process.exit(0);
        }

        let table = `### ðŸ§ª Axe Accessibility Report\n\n`;
        table += `| Issue | Impact | Target | Help |\n`;
        table += `|-------|--------|--------|------|\n`;

        violations.forEach(v => {
          const impact = v.impact || "n/a";
          const help = `[${v.help}](${v.helpUrl})`;
          v.nodes.forEach(n => {
            const target = Array.isArray(n.target) ? n.target.join(', ') : 'n/a';
            table += `| ${v.id} | ${impact} | \`${target}\` | ${help} |\n`;
          });
        });

        fs.writeFileSync('axe-summary.md', table);
        EOF

    - name: Comment on PR with results
      if: ${{ github.event.pull_request.number }}
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const prNumber = context.payload.pull_request.number;
          const result = `${{ steps.run_test.outputs.result }}`;

          // Read the full contents of the markdown file (if it was generated in a previous step)
          const fs = require('fs');
          const reportContent = fs.readFileSync('axe-report.md', 'utf8');

          // Format the report content with a spoiler
          const commentBody = `ðŸ§ª **Axe Test Results:**\n<details><summary>Click to view full report</summary>\n\`\`\`md\n${reportContent}\n\`\`\`\n</details>`;

          // Create or update the comment on the PR
          await github.rest.issues.createComment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: prNumber,
            body: commentBody
          });
