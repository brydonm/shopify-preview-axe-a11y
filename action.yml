name: "Shopify Preview Axe A11y Report"
description: "Run axe accessibility tests on Shopify preview URLs from PR description and comment results."

inputs:
  default_url:
    description: "Default URL to use if no preview URL is found"
    required: false
    default: ""

runs:
  using: "composite"
  steps:
    - name: Extract PR Body
      if: ${{ github.event_name == 'pull_request' }}
      id: pr_body
      shell: bash
      run: |
        echo "Extracting PR body..."
        if [ -z "${{ github.event.pull_request.body }}" ]; then
          echo "PR body is empty, exiting..."
          exit 1
        fi
        echo "PR_BODY<<EOF" >> $GITHUB_ENV
        echo "${{ github.event.pull_request.body }}" >> $GITHUB_ENV
        echo "EOF" >> $GITHUB_ENV

    - name: Parse preview URL from PR body
      if: ${{ github.event_name == 'pull_request' }}
      id: parse_url
      shell: bash
      run: |
        echo "Extracting URLs from PR body..."
        ALL_URLS=$(echo "$PR_BODY" | grep -oE 'https?://[^ )\n]+')

        echo "Extracted URLs:"
        echo "$ALL_URLS"

        # Match URLs that contain '?preview_theme_id=' or 'shopifypreview.com'
        MATCHING_URL=$(echo "$ALL_URLS" | grep -E '\?preview_theme_id=|shopifypreview\.com' | head -n1)

        echo "==== DEBUG INFO ===="
        echo "All extracted URLs:"
        echo "$ALL_URLS"
        echo "Matched URL:"
        echo "$MATCHING_URL"
        echo "===================="

        if [ -z "$MATCHING_URL" ]; then
          echo "No matching URL found."
          echo "url=" >> $GITHUB_OUTPUT
          echo "path=" >> $GITHUB_OUTPUT
          exit 1
        fi

        # Strip query string to get just the path
        # First remove protocol and domain
        PATH_WITH_QUERY=$(echo "$MATCHING_URL" | sed -E 's|https?://[^/]+||')
        # Now remove preview_theme_id param (and everything after)
        CLEAN_PATH=$(echo "$PATH_WITH_QUERY" | sed -E 's/\?.*$//')

        echo "Cleaned path: $CLEAN_PATH"

        echo "url=$MATCHING_URL" >> $GITHUB_OUTPUT
        echo "path=$CLEAN_PATH" >> $GITHUB_OUTPUT
        echo "sanitized_path=${CLEAN_PATH//\//-}" >> $GITHUB_OUTPUT
        echo "axe_branch_path="_axe-a11y-reports/${{ steps.branch_name.outputs.name }}-${{ steps.parse_url.outputs.sanitized_path }}-branch-report.json" >> $GITHUB_OUTPUT

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: "18"

    - name: Install axe CLI
      shell: bash
      run: |
        echo "Installing axe CLI..."
        npm install -g @axe-core/cli

    - name: Get branch name
      id: branch_name
      shell: bash
      run: |
        if [[ "${{ github.event_name }}" == "pull_request" ]]; then
          BRANCH="${{ github.head_ref }}"
        else
          BRANCH="${{ github.ref_name }}"
        fi

        SANITIZED_NAME="${BRANCH//\//-}"
        echo "name=$SANITIZED_NAME" >> $GITHUB_OUTPUT

    - name: Run axe test
      id: run_test
      shell: bash
      run: |
        mkdir -p _axe-a11y-reports
        URL="${{ steps.parse_url.outputs.url }}"
        echo "Testing URL: $URL"
        echo "Testing path: $PATH"

        if [ -z "$URL" ]; then
          if [ -z "${{ inputs.default_url }}" ]; then
            echo "No URL provided and no default URL set. No test run."
            echo "No URL found." > axe-summary.md
            exit 0
          else
            echo "No URL provided. Using default URL: ${{ inputs.default_url }} with additional path: ${{ steps.parse_url.outputs.path }}"
            URL="${{ inputs.default_url }}${{ steps.parse_url.outputs.path }}"
          fi
        fi

        echo "Running axe on $URL"
        axe $URL --save ${{ steps.branch_name.outputs.axe_branch_path }}
        echo "axe report saved to ${{ steps.branch_name.outputs.axe_branch_path }}"

        node "${{ github.action_path }}/scripts/process-current-violations.js" "${{ steps.branch_name.outputs.name }}"

    - name: Process Previous Violations from Target Branch Report (if available)
      id: process_previous_violations
      shell: bash
      run: |
        TARGET_REPORT="_axe-a11y-reports/${{ github.base_ref }}-branch-report.json"
        echo "Checking for file: $TARGET_REPORT"

        if [ -f "$TARGET_REPORT" ]; then
          echo "Processing downloaded report for target branch..."

          node "${{ github.action_path }}/scripts/process-previous-violations.js" "${{ steps.branch_name.outputs.name }}"
        else
          echo "No axe-report found for target branch. Creating new comparison."
          axe $URL --save _axe-a11y-reports/${{ steps.branch_name.outputs.name }}-${{ steps.parse_url.outputs.sanitized_path }}-branch-report.json
          exit 0
        fi
      if: success() && github.event_name == 'pull_request'

    - name: Generate PR comment markdown
      shell: bash
      run: |
        node "${{ github.action_path }}/scripts/generate-axe-comment.js" "${{ steps.parse_url.outputs.sanitized_path }}"

    - name: Comment on PR with results (only if PR is open)
      if: ${{ github.event.pull_request.state == 'open' }}
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const commentBody = fs.readFileSync('axe-comment.md', 'utf8');

          await github.rest.issues.createComment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
            body: commentBody,
          });

    - name: Commit and push reports
      if: always() && github.event_name == 'push'
      shell: bash
      run: |
        git config --global user.name "github-actions[bot]"
        git config --global user.email "github-actions[bot]@users.noreply.github.com"

        git fetch
        git checkout ${{ github.head_ref }}

        git add _axe-a11y-reports
        git commit -m "chore: update axe accessibility reports" || echo "No changes to commit"
        git push
